{

 "cells": [

  {

   "cell_type": "code",

   "execution_count": 1,

   "metadata": {},

   "outputs": [],

   "source": [

    "import pandas as pd\n",

    "import requests\n",

    "import json"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 2,

   "metadata": {},

   "outputs": [],

   "source": [

    "data = pd.DataFrame()\n",

    "for n in range(1,37):\n",

    "    apnd = pd.read_html(f\"http://icasualties.org/App/AfghanFatalities?page={n}&rows=100\")\n",

    "    apnd = apnd[0]\n",

    "    data = data.append(apnd)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 9,

   "metadata": {},

   "outputs": [],

   "source": [

    "data.reset_index(drop=True,inplace=True)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 24,

   "metadata": {},

   "outputs": [],

   "source": [

    "rds_connection_string = f"postgres:PASSWORD@localhost:5432/afghan_db"
       
    "engine = create_engine(f'postgresql://{rds_connection_string}')",
       
    "df.to_sql(name='data', con=engine, if_exists='append', index=False)"

    "data.to_csv(\"casualty_data.csv\",index=False)"
    
    

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 78,

   "metadata": {},

   "outputs": [],

   "source": [

    "data = pd.read_csv(\"casualty_data.csv\")"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 16,

   "metadata": {},

   "outputs": [],

   "source": [

    "#to get geocodes for casualty incidents\n",

    "gkey = \"AIzaSyA-Rjp6nOeJp6815Xt1Kkuxc5XKMiKl_yA\""

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 10,

   "metadata": {},

   "outputs": [],

   "source": [

    "#unique values for location\n",

    "casualty_df = data[\"Country\"] + \" \" + data[\"Province\"] +\" \"+ data[\"Where\"]\n",

    "casualty_df = casualty_df.unique()\n",

    "\n",

    "casualty_geocodes = pd.DataFrame()\n",

    "\n",

    "for c in casualty_df:\n",

    "#     print(c)\n",

    "    target_url = (f'https://maps.googleapis.com/maps/api/geocode/json?address={c}&key={gkey}')\n",

    "    geo_data = requests.get(target_url).json()\n",

    "    try:\n",

    "        lat = geo_data[\"results\"][0][\"geometry\"][\"location\"][\"lat\"]\n",

    "        lng = geo_data[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]\n",

    "    except IndexError:\n",

    "        lat = \"NAN\"\n",

    "        lng = \"NAN\"\n",

    "    apnd = pd.DataFrame({\"Casualty_Location\":[c],\"lat\":[lat],\"lng\":[lng]})\n",

    "    casualty_geocodes = casualty_geocodes.append(apnd)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 53,

   "metadata": {},

   "outputs": [],

   "source": [

    "rds_connection_string = f"postgres:PASSWORD@localhost:5432/afghan_db"
    "engine = create_engine(f'postgresql://{rds_connection_string}')",
    "df.to_sql(name='casualty_geocodes', con=engine, if_exists='append', index=False)"    
    "casualty_geocodes.to_csv(\"casualty_geocodes.csv\",index=False)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 25,

   "metadata": {},

   "outputs": [],

   "source": [

    "#to get geocodes for soldier's origin\n",

    "origin_df = pd.DataFrame()\n",

    "for i in range(0,len(data)):\n",

    "    state = data[\"State\"][i]\n",

    "    city = data[\"City\"][i]\n",

    "    if data[\"State\"][i] == \"Unknown\":\n",

    "        state = data[\"Nationality\"][i]\n",

    "    if data[\"City\"][i] == \"Not reported yet\":\n",

    "        city = \"\"\n",

    "    apnd = pd.DataFrame({\"Origin\":[state + \" \" + city]})\n",

    "    origin_df = origin_df.append(apnd)\n",

    "\n",

    "origin_df = origin_df[\"Origin\"].unique()\n",

    "\n",

    "origin_geocodes = pd.DataFrame()\n",

    "for o in origin_df:\n",

    "#     print(c)\n",

    "    target_url = (f'https://maps.googleapis.com/maps/api/geocode/json?address={o}&key={gkey}')\n",

    "    geo_data = requests.get(target_url).json()\n",

    "    try:\n",

    "        lat = geo_data[\"results\"][0][\"geometry\"][\"location\"][\"lat\"]\n",

    "        lng = geo_data[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]\n",

    "    except IndexError:\n",

    "        lat = \"NAN\"\n",

    "        lng = \"NAN\"\n",

    "    apnd = pd.DataFrame({\"Where\":[o],\"lat\":[lat],\"lng\":[lng]})\n",

    "    origin_geocodes = origin_geocodes.append(apnd)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 26,

   "metadata": {},

   "outputs": [],

   "source": [

    "rds_connection_string = f"postgres:PASSWORD@localhost:5432/afghan_db"
    "engine = create_engine(f'postgresql://{rds_connection_string}')"
    "df.to_sql(name='origin_geocodes', con=engine, if_exists='append', index=False)",

    "origin_geocodes.to_csv(\"origin_geocodes.csv\",index= False)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 27,

   "metadata": {},

   "outputs": [],

   "source": [

    "#casualty_province_geocode\n",

    "\n",

    "#unique values for location\n",

    "cas_province_df = data[\"Country\"] + \" \" + data[\"Province\"]\n",

    "cas_province_df = cas_province_df.unique()\n",

    "\n",

    "cas_province_geocodes = pd.DataFrame()\n",

    "\n",

    "for c in cas_province_df:\n",

    "#     print(c)\n",

    "    target_url = (f'https://maps.googleapis.com/maps/api/geocode/json?address={c}&key={gkey}')\n",

    "    geo_data = requests.get(target_url).json()\n",

    "    try:\n",

    "        lat = geo_data[\"results\"][0][\"geometry\"][\"location\"][\"lat\"]\n",

    "        lng = geo_data[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]\n",

    "    except IndexError:\n",

    "        lat = \"NAN\"\n",

    "        lng = \"NAN\"\n",

    "    apnd = pd.DataFrame({\"Casualty_Location\":[c],\"lat\":[lat],\"lng\":[lng]})\n",

    "    cas_province_geocodes = cas_province_geocodes.append(apnd)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 28,

   "metadata": {},

   "outputs": [],

   "source": [

    "rds_connection_string = f"postgres:PASSWORD@localhost:5432/afghan_db"
    "engine = create_engine(f'postgresql://{rds_connection_string}')"
    "df.to_sql(name='cas_province_geocodes', con=engine, if_exists='append', index=False)",

    "cas_province_geocodes.to_csv(\"casualty_province_geocodes.csv\",index=False)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 80,

   "metadata": {},

   "outputs": [],

   "source": [

    "# casualty_geocodes = pd.read_csv(\"casualty_geocodes.csv\")\n",

    "# origin_geocodes = pd.read_csv(\"origin_geocodes.csv\")\n",

    "\n",

    "# data[\"Casualty_Location\"] = data[\"Country\"] + \" \" + data[\"Province\"] +\" \"+ data[\"Where\"]\n",

    "# data[\"Origin\"] = data[\"State\"] + \" \" + data[\"City\"]\n",

    "# data.head()"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": 1,

   "metadata": {},

   "outputs": [],

   "source": [

    "# casualty_geocodes.rename(columns = {\"lat\":\"lat_c\"},inplace = True)\n",

    "# casualty_geocodes.rename(columns = {\"lng\":\"lng_c\"},inplace = True)\n",

    "# df = pd.merge(data,casualty_geocodes,on = \"Casualty_Location\")\n",

    "\n",

    "# origin_geocodes.rename(columns = {\"lat\":\"lat_o\"},inplace = True)\n",

    "# origin_geocodes.rename(columns = {\"lng\":\"lng_o\"},inplace = True)\n",

    "# df = pd.merge(df,origin_geocodes,on = \"Origin\")\n",

    "\n",

    "# dfs = df[df[\"Date\"].str.contains(\"2018\")].reset_index(drop=True)\n",

    "\n",

    "# fig = go.Figure()\n",

    "\n",

    "# fig.add_trace(\n",

    "#     go.Scattergeo(\n",

    "# #         locationmode = 'USA-states',\n",

    "#         lat = dfs[\"lat_o\"],\n",

    "#         lon = dfs[\"lng_o\"],\n",

    "#         mode = 'markers',\n",

    "#         text = dfs[\"Name\"]\n",

    "# #         line = dict(width = 1,color = 'red'),\n",

    "# #         opacity = float(df_flight_paths['cnt'][i]) / float(df_flight_paths['cnt'].max()),\n",

    "#     )\n",

    "# )\n",

    "\n",

    "# for i in range(0,len(dfs)):\n",

    "#     fig.add_trace(\n",

    "#         go.Scattergeo(\n",

    "#     #         locationmode = 'USA-states',\n",

    "#             lat = [dfs[\"lat_c\"][i],dfs[\"lat_o\"][i]],\n",

    "#             lon = [dfs['lng_c'][i],dfs[\"lng_o\"][i]],\n",

    "#             mode = 'lines',\n",

    "#             line = dict(width = 1,color = 'red'),\n",

    "#     #         opacity = float(df_flight_paths['cnt'][i]) / float(df_flight_paths['cnt'].max()),\n",

    "#         )\n",

    "#     )\n",

    "\n",

    "\n",

    "# fig.update_layout(\n",

    "#     title_text = 'Feb. 2011 American Airline flight paths<br>(Hover for airport names)',\n",

    "#     showlegend = False,\n",

    "#     geo = go.layout.Geo(\n",

    "#         scope = 'world',\n",

    "#         projection_type = 'natural earth',\n",

    "#         showland = True,\n",

    "#         landcolor = 'rgb(243, 243, 243)',\n",

    "#         countrycolor = 'rgb(204, 204, 204)',\n",

    "#     ),\n",

    "# )\n",

    "\n",

    "\n",

    "\n",

    "# py.offline.plot(fig)"

   ]

  },

  {

   "cell_type": "code",

   "execution_count": null,

   "metadata": {},

   "outputs": [],

   "source": []

  }

 ],

 "metadata": {

  "kernelspec": {

   "display_name": "Python 3",

   "language": "python",

   "name": "python3"

  },

  "language_info": {

   "codemirror_mode": {

    "name": "ipython",

    "version": 3

   },

   "file_extension": ".py",

   "mimetype": "text/x-python",

   "name": "python",

   "nbconvert_exporter": "python",

   "pygments_lexer": "ipython3",

   "version": "3.7.3"

  }

 },

 "nbformat": 4,

 "nbformat_minor": 4

}